{"version":3,"sources":["logo.svg","App.js","graphql/queries.js","graphql/mutations.js","graphql/subscriptions.js","serviceWorker.js","aws-exports.js","index.js"],"names":["module","exports","CLIENT_ID","uuid","console","log","App","initialState","notes","loading","error","form","name","description","useReducer","state","action","type","laoding","note","value","dispatch","fetchNotes","a","API","graphql","query","notesData","data","listNotes","items","createNote","alert","clientId","completed","id","variables","input","onChange","e","target","deleteNote","noteToDelete","filter","x","err","updateNote","map","useEffect","subscription","subscribe","next","noteData","onCreateNote","unsubscribe","styles","container","padding","marginBottom","item","textAlign","p","color","style","placeholder","onClick","dataSource","renderItem","Item","actions","Meta","title","completetd","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.25546896.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useReducer } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { API } from 'aws-amplify';\nimport { List, Input, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport { listNotes } from './graphql/queries';\n\nimport { v4 as uuid } from 'uuid';\nimport { \n  createNote as CreateNote\n  , deleteNote as DeleteNote\n  , updateNote as UpdateNote\n} from './graphql/mutations';\n\nimport { onCreateNote } from './graphql/subscriptions';\n\nconst CLIENT_ID = uuid();\nconsole.log(CLIENT_ID);\n\nconst App = () => {\n\n  const initialState = {\n    notes: []\n    , loading: true\n    , error: false\n    , form: { \n        name: ''\n        , description: '' \n      }\n  };\n\n  const reducer = (state, action) => {\n\n    switch(action.type) {\n\n      case 'SET_NOTES':\n        return {\n          ...state\n          , notes: action.notes\n          , loading: false\n        };\n\n      case 'ERROR':\n        return {\n          ...state\n          , laoding: false\n          , error: true\n        };\n\n      case 'ADD_NOTE':\n        return {\n          ...state\n          , notes: [\n              ...state.notes\n              , action.note\n            ]\n        };\n\n      case 'RESET_FORM':\n        return {\n          ...state\n          , form: initialState.form\n        };\n\n      case 'SET_INPUT':\n        return {\n          ...state\n          , form: {\n              ...state.form\n              , [action.name]: action.value\n          }\n        }\n\n      default:\n        return { \n          ...state \n        };\n    }\n\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchNotes = async () => {\n    try {\n      const notesData = await API.graphql({\n        query: listNotes\n      });\n      dispatch({\n        type: 'SET_NOTES'\n        , notes: notesData.data.listNotes.items\n      });\n    }\n\n    catch (err) {\n      console.error(err);\n      dispatch({\n        type: 'ERROR'\n      })\n    }\n  }\n\n  const createNote = async () => {\n    const { form } = state\n    if (!form.name || !form.description) {\n      return alert('please enter a name and description');\n    }\n\n    const note = { \n      ...form  // spreads in name and description\n      , clientId: CLIENT_ID  // Was mispelled in model\n      , completed: false\n      , id: uuid()\n    }\n\n    dispatch({ \n      type: 'ADD_NOTE'\n      , note \n    });\n\n    dispatch({\n      type: 'RESET_FORM'\n    });\n\n    try {\n      await API.graphql({\n        query: CreateNote\n        , variables: { input: note }\n      });\n      console.log('successfully created note!');\n    }\n\n    catch (err) {\n      console.log(\"error: \", err);\n    }\n\n  }\n\n  const onChange = (e) => {\n    dispatch({\n      type: 'SET_INPUT'\n      , name: e.target.name\n      , value: e.target.value\n    });\n  }\n\n  const deleteNote = async (noteToDelete) => {\n\n    console.log(noteToDelete);\n    \n    dispatch({ \n      type: 'SET_NOTES'\n      , notes: state.notes.filter(x => x !== noteToDelete)\n    });\n    \n    try {\n      await API.graphql({\n        query: DeleteNote,\n        variables: { \n          input: { \n            id: noteToDelete.id \n          } \n        }\n      });\n\n      console.log('successfully deleted note!');\n      \n      } \n      \n      catch (err) {\n        console.log({ err });\n    }\n  }\n\n  const updateNote = async (note) => {\n\n    dispatch({ \n      type: 'SET_NOTES'\n      , notes: state.notes.map(x => ({\n        ...x\n        , completed: x === note ? !x.completed : x.completed\n      }))\n    });\n\n    try {\n      await API.graphql({\n        query: UpdateNote\n        , variables: { \n            input: { \n              id: note.id\n              , completed: !note.completed \n            } \n          }\n      });\n\n      console.log('note successfully updated!')\n    } \n    \n    catch (err) {\n      console.log('error: ', err);\n    }\n  }\n\n  useEffect(\n    () => {\n\n      fetchNotes();\n\n      const subscription = API.graphql({\n        query: onCreateNote\n      })\n        .subscribe({\n          next: noteData => {\n            \n            console.log(noteData);\n            \n            const note = noteData.value.data.onCreateNote;\n            \n            if (CLIENT_ID === note.clientId) \n              return\n\n            dispatch({ \n              type: 'ADD_NOTE'\n              , note // shorthand for note: note\n            });\n          }\n        });\n\n        return () => subscription.unsubscribe();\n  }\n    , []\n  );\n\n  const styles = {\n    container: {padding: 20},\n    input: {marginBottom: 10},\n    item: { textAlign: 'left' },\n    p: { color: '#1890ff' }\n  }\n\n  const renderItem = (item) => {\n    return (\n      <List.Item\n        style={styles.item}\n        actions={[\n          <p \n            style={styles.p} \n            onClick={() => deleteNote(item)}>\n                Delete\n          </p>\n          , <p \n              style={styles.p}\n              onClick={() => updateNote(item)}\n            >\n              {item.completed ? 'Mark Incomplete' : 'Mark Complete'}\n        </p>\n        ]}\n      >\n      <List.Item.Meta\n        title={ item.completetd ? item.name + ' (complete)' : item.name }\n        description={item.description}\n      />\n      </List.Item>    \n    )\n  }\n\n\n  return (\n    <div\n      style={styles.container}\n    >\n      <Input \n        placeholder='Note Name'\n        style={styles.input}\n        name='name'\n        onChange={onChange}\n        value={state.form.name}\n      />\n      <Input \n        placeholder='Note Description'\n        style={styles.input}\n        name='description'\n        onChange={onChange}\n        value={state.form.description}\n      />\n      <Button\n        type='primary'\n        onClick={createNote}\n      >\n        Create New note\n      </Button>\n      <List\n        loading={state.loading}\n        dataSource={state.notes}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://oqxrseqfc5cf5pziut2ab45e2a.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-zxge6a2wbzeingccke7mbwacku\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}